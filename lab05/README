
In this lab you'll write some generic functions on
binary trees using only the interface defined in Shaffer's
abstract base class BinNode (see ../shaffer/BinNode.h). 
Which is to say, the functions will all take an argument of
type BinNode<E>*, and more or less all you can do with such a 
thing is call one or more of the methods defined in BinNode.h.

To make your life a bit easier, I've provided a template
file in this directory (in the file lab05.cpp) which you
can use to write and test all of your functions for this lab.
The easiest thing to do will be to copy lab05.cpp into the shaffer
directory and edit/compile/test it there.

Note that in the main() program itself, to actually test your 
functions, I've created an instance of type "BSTNode",
which is a concrete child of BinNode.  You don't need to 
worry about the details of BSTNode for now; we'll cover 
it in class soon.

The example I created is the tree

          1
        /  \
       /    \
      2      3
     / \  
    /   \ 
   4     5

but to thoroughly test your functions, you'll want to create
(many!) more trees in a similar fashion. 

I've also included an implementation of a recursive function that 
returns the number of nodes in the binary tree; it's a good model
for several of the exercises below if you're not fully comfortable 
with recursion. (Remember recursion is MAGIC; you get to assume you've
already written the function you're trying to write!)

(1) Write the function "height" that takes a BinNode<E>* as an argument
and returns the height of the binary tree.

(2) Write the function "leaf_count" that takes a BinNode<E>* as an argument
and returns the number of leaf nodes.

(3) Write the function "sum_nodes" that takes a BinNode<E>* as an argument
and returns the sum of the elements at every node.  You can assume that
the elements are integers.

(4) Write the function "search" that takes a BinNode<E>* and a value of 
type E and returns true if the value appears somewhere in the tree
and false otherwise. If you've read ahead in the book, you know that
BSTNode is usually used to store a "binary search tree" (BST) which
imposes strong conditions on the values, but we're not using BSTNode
in that way in this case, so you should not  assume anything about where 
the element you're searching for might be.

(5) Write the function "print_tree" to print the value at each
node of the binary tree.  Test it out, and see if you can predict
the order in which the nodes will be printed out for a complete
tree of height 3 or 4, say.  Now, write the function 
"print_tree_by_level" which outputs the root node first, 
then the nodes at level 1 from left to right, then the nodes at
level 2 from left to right, etc.  (Almost surely this isn't what
your print_tree function did!)  Hint: a Queue might be very
helpful for this.
