(1) [This is essentially Project 5.5 in Shaffer, with extra hints]

I presented the heap data structure to you as a kind of 
"priority queue".  In this lab, you'll use the heap class
(as implemented in Shaffer's heap.h) to implement a
priority queue class.  Since this is more or less exactly what
a heap is, this ought to be relatively easy... you 
can think of the priority queue as a (very) thin "wrapper"
around the heap.

Your priority queue should store "jobs", each of which consists
of an integer jobID and an integer priority value.  The first
thing you should do is define a class Job that has these
two ints as attributes and any methods you think are important.
This class will be the "E" you use in conjunction with the
templated heap class.

The priority queue should have at least the following three methods:

void enqueue(int jobID, int priority);
int dequeue();
void changeweight(int jobID, int newPriority);

Of course, dequeue is supposed to remove the Job with
maximum priority value from the queue, and return its jobID.

There's one more unusual thing about the heap class, and
that is that it takes *two* template parameter types.
The first is the type "E" of the objects you're storing
("Job" in this case), and the second is a type "Comp" that 
defines the way two objects of type E are to be compared
for the purposes of the heap.  For example, we discussed what
is strictly-speaking a "max heap" in class, which means that
the value of a node is always greater than or equal to its children.
The point is that there is also a notion of "min heap" with
the opposite ordering condition.  You can implement either using
Shaffer's heap simply by changing the class you use in place
of Comp (a class like this is usually called a "Comparator" class).
The Comparator just needs to define a method "prior", which
takes two arguments of type E, and returns bool true if the
first argument should come before the second argument in the heap.
Check out the (very small!) classes "maxintCompare" and
"minintCompare" in compare.h for examples that can be used
if type E is "int".  You'll need to define your own Comparator
type (say, "maxJobCompare") in which the "prior" method takes
two arguments of type "Job".

Once you have "Job" and "maxJobCompare" in place, then writing
the methods enqueue and dequeue for your priority queue class should
be quite easy (they're just thin wrappers around heap's insert
and removefirst methods.  I'd recommend writing those two first,
getting them to compile, and testing thoroughly.

Now, the changeweight method is a bit trickier to write, because heap
doesn't provide us with any easy way of searching for an
arbitrary element by its jobID.

Use an array, storing the object with ObjectID i in position i. (Be sure in your
testing to keep the ObjectIDs within the array bounds.) You must also
modify the heap implementation to store the object’s position in the auxiliary
array so that updates to objects in the heap can be updated as well in the
array.

(2) The heap data structure can be used to sort an array of integers
quite efficiently.  The algorithm is straightforward; given an 
array of n ints, build a *min heap* containing them
(which, recall, can be done in ϴ(n) time), and then simply
dequeue the elements one-by-one.  Since it's a min heap, you're guaranteed
to remove the smallest remaining element at each step.

This is one of many sorting algorithms you'll encounter in your 
CS travels; it's called "heapsort" for obvious reasons.
What are the average case and worst case running times for
heapsort?  How do these compare with other sort algorithms you
might know about (e.g., perhaps, quicksort, mergesort, bubble sort).
>>>>>>> origin
