
(1) [Shaffer, Exercise 5.18] Write a recursive function that prints out
the node values for a binary tree in sorted order from highest to lowest.
You can assume that the tree satisfies the Binary Search Tree Property.

(2) [Shaffer, Exercise 5.20] Write a recursive function named printRange
that, given the pointer to the root of a binary tree satisfying the BST
Property, a low key value, and a high key value, prints in sorted order
all records whose key values fall between the two given keys.
This is easy to achieve with small changes to the previous exercise,
but here you should ensure that the function visits as few nodes in
the tree as possible.

(3) [Shaffer, Exercise 5.21] Write a recursive function named checkBST
that, given the pointer to the root of a binary tree, will return true
if and only if the tree satisfies the Binary Search Tree Property.
This is trickier than it might appear at first; it's not enough
to check that the left/right subtrees satisfy the BST property...
it also has to be true that the biggest element in the left subtree
is less than the root element, and the smallest element in the
right subtree is greater than or equal to the root element.
